extern crate alloc;
extern crate core;
extern crate wee_alloc;

use blobstream_contracts_rust::input_type::CommitHeaderRangeInput;
pub use blobstream_contracts_rust::{commit_header_range, initializer};
pub use seq_wasm_sdk::allocator::{allocate, deallocate}; // re-export
use seq_wasm_sdk::state::{self};
use seq_wasm_sdk::{precompiles, FixedBytes, U256};
pub use std::alloc::{alloc, Layout};
use std::vec;
#[no_mangle]
pub extern "C" fn test_store_u256() {
    state::store_u256(1, U256::from(123));
}

#[no_mangle]
pub extern "C" fn test_get_u256() -> bool {
    state::store_u256(2, U256::from(123));
    let u256_fs = state::get_u256(2);
    if u256_fs == U256::from(123) {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_u64() {
    state::store_u64(3, 123);
}

#[no_mangle]
pub extern "C" fn test_get_u64() -> bool {
    state::store_u64(4, 123);
    let u64_fs = state::get_u64(4);
    if u64_fs == 123 {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_u32() {
    state::store_u32(5, 123);
}

#[no_mangle]
pub extern "C" fn test_get_u32() -> bool {
    state::store_u32(6, 123);
    let u32_fs = state::get_u32(6);
    if u32_fs == 123 {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_bool() {
    state::store_bool(7, 1);
}

#[no_mangle]
pub extern "C" fn test_get_bool() -> bool {
    state::store_bool(8, 1);
    let bool_fs = state::get_bool(8);
    if bool_fs == 1 {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_bytes32() {
    state::store_bytes32(9, FixedBytes::from([1; 32]));
}

#[no_mangle]
pub extern "C" fn test_get_bytes32() -> bool {
    state::store_bytes32(10, FixedBytes::from([1; 32]));
    let bytes32_fs = state::get_bytes32(10);
    if bytes32_fs == [1; 32] {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_bytes() {
    state::store_vec(11, &vec![1, 2, 3]);
}

#[no_mangle]
pub extern "C" fn test_get_bytes() -> bool {
    state::store_vec(12, &vec![1, 2, 3]);
    let bytes_fs = state::get_vec(12);
    if bytes_fs == vec![1, 2, 3] {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_mapping_u256_bytes32() {
    state::store_mapping_u256_bytes32(1, U256::from(569), FixedBytes::from([1; 32]));
}

#[no_mangle]
pub extern "C" fn test_get_mapping_u256_bytes32() -> bool {
    state::store_mapping_u256_bytes32(2, U256::from(569), FixedBytes::from([1; 32]));
    let bytes32_fs = state::get_mapping_u256_bytes32(2, U256::from(569));
    if bytes32_fs == [1; 32] {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_mapping_u64_bytes32() {
    state::store_mapping_u64_bytes32(3, 4230, FixedBytes::from([1; 32]));
}

#[no_mangle]
pub extern "C" fn test_get_mapping_u64_bytes32() -> bool {
    // state::store_mapping_u64_bytes32(4, 4230, FixedBytes::from([1; 32]));
    // let bytes32_fs = state::get_mapping_u64_bytes32(4, 4230);
    // if bytes32_fs == [1; 32] {
    //     return true;
    // }
    // false
    true
}

#[no_mangle]
pub extern "C" fn test_store_mapping_u32_bytes32() {
    state::store_mapping_u32_bytes32(5, 123, FixedBytes::from([1; 32]));
}

#[no_mangle]
pub extern "C" fn test_get_mapping_u32_bytes32() -> bool {
    state::store_mapping_u32_bytes32(6, 123, FixedBytes::from([1; 32]));
    let bytes32_fs = state::get_mapping_u32_bytes32(6, 123);
    if bytes32_fs == [1; 32] {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_mapping_bytes32_bytes32() {
    state::store_mapping_bytes32_bytes32(7, FixedBytes::from([2; 32]), FixedBytes::from([4; 32]));
}

#[no_mangle]
pub extern "C" fn test_get_mapping_bytes32_bytes32() -> bool {
    state::store_mapping_bytes32_bytes32(8, FixedBytes::from([2; 32]), FixedBytes::from([4; 32]));
    let bytes32_fs = state::get_mapping_bytes32_bytes32(8, FixedBytes::from([2; 32]));
    if bytes32_fs == [4; 32] {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_store_mapping_bytes32_u32() {
    state::store_mapping_bytes32_u32(9, FixedBytes::from([2; 32]), 12369);
}

#[no_mangle]
pub extern "C" fn test_get_mapping_bytes32_u32() -> bool {
    state::store_mapping_bytes32_u32(10, FixedBytes::from([2; 32]), 12369);
    let u32_fs = state::get_mapping_bytes32_u32(10, FixedBytes::from([2; 32]));
    if u32_fs == 12369 {
        return true;
    }
    false
}

#[no_mangle]
pub extern "C" fn test_multi_input(a: u32, b: u64, c: u32, d: u32) -> u32 {
    a + b as u32 + c + d
}

#[no_mangle]
pub extern "C" fn test_commit_header() {
    let data = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 7, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 7, 16, 50, 52, 52, 101, 55, 98, 57, 51, 55, 48, 100, 51, 51, 56, 48, 100,
        101, 101, 102, 102, 54, 51, 52, 48, 98, 101, 97, 100, 102, 48, 51, 97, 56, 102, 53, 56, 52,
        50, 51, 53, 100, 49, 51, 53, 101, 56, 101, 57, 49, 48, 57, 53, 97, 99, 53, 49, 50, 102, 98,
        100, 54, 50, 51, 98, 48, 57, 53, 49, 101, 48, 98, 100, 99, 54, 57, 54, 48, 102, 57, 49, 49,
        53, 54, 51, 50, 97, 101, 98, 50, 55, 49, 53, 97, 99, 52, 98, 100, 51, 57, 99, 49, 54, 97,
        102, 48, 51, 54, 54, 56, 49, 53, 57, 54, 53, 55, 50, 55, 48, 98, 56, 97, 48, 101, 48, 49,
        102, 101, 48, 49, 99, 56, 48, 102, 51, 53, 55, 56, 55, 56, 48, 98, 52, 102, 97, 98, 101,
        98, 56, 51, 49, 102, 53, 49, 101, 57, 97, 50, 102, 99, 49, 51, 100, 100, 57, 54, 54, 51,
        57, 54, 100, 50, 52, 98, 52, 98, 102, 53, 101, 100, 55, 55, 54, 100, 102, 50, 53, 50, 100,
        50, 53, 52, 98, 50, 98, 48, 52, 57, 101, 54, 55, 99, 55, 102, 52, 56, 101, 98, 97, 57, 48,
        53, 102, 51, 51, 50, 99, 53, 99, 54, 56, 54, 52, 97, 100, 53, 57, 54, 51, 97, 98, 50, 48,
        102, 99, 55, 99, 101, 50, 55, 98, 101, 52, 54, 54, 53, 100, 57, 99, 53, 48, 56, 98, 55, 51,
        99, 57, 50, 50, 55, 52, 52, 48, 57, 101, 97, 54, 51, 56, 50, 100, 49, 98, 50, 101, 55, 100,
        98, 49, 50, 102, 53, 99, 54, 50, 55, 52, 101, 55, 49, 97, 48, 56, 53, 49, 48, 53, 100, 48,
        102, 101, 98, 48, 98, 49, 101, 55, 98, 55, 54, 101, 53, 98, 48, 101, 99, 100, 54, 55, 53,
        49, 48, 53, 52, 99, 56, 53, 55, 51, 98, 56, 49, 101, 53, 51, 56, 49, 56, 56, 54, 98, 49,
        97, 53, 57, 100, 56, 52, 54, 50, 54, 53, 48, 49, 57, 52, 50, 98, 50, 102, 100, 50, 55, 99,
        48, 51, 56, 48, 99, 99, 49, 97, 48, 55, 50, 102, 97, 48, 101, 56, 57, 48, 49, 51, 98, 48,
        48, 100, 99, 100, 98, 53, 48, 51, 48, 100, 55, 54, 48, 97, 100, 50, 56, 49, 51, 101, 51,
        99, 102, 102, 53, 50, 98, 53, 98, 54, 51, 50, 56, 57, 102, 54, 49, 99, 55, 57, 51, 102, 48,
        54, 55, 98, 100, 102, 101, 101, 102, 50, 55, 100, 102, 53, 54, 48, 101, 53, 48, 100, 102,
        50, 56, 54, 100, 49, 100, 51, 99, 54, 100, 52, 57, 54, 54, 100, 49, 101, 52, 101, 49, 98,
        97, 54, 99, 100, 56, 49, 49, 98, 54, 48, 53, 54, 101, 97, 56, 48, 100, 98, 100, 54, 53, 48,
        54, 50, 52, 102, 51, 51, 56, 97, 100, 100, 98, 99, 101, 54, 102, 53, 99, 48, 52, 97, 99,
        49, 49, 54, 54, 100, 98, 53, 57, 100, 51, 48, 98, 53, 57, 101, 51, 55, 56, 49, 50, 100, 54,
        51, 101, 50, 49, 57, 53, 51, 51, 102, 57, 97, 52, 50, 101, 97, 100, 50, 101, 53, 99, 54,
        51, 51, 55, 50, 51, 57, 56, 55, 102, 49, 102, 100, 56, 50, 52, 49, 100, 100, 49, 50, 56,
        50, 54, 101, 99, 98, 48, 99, 99, 55, 97, 101, 55, 50, 97, 102, 55, 101, 57, 48, 99, 99,
        101, 98, 53, 98, 50, 100, 48, 49, 102, 56, 99, 97, 102, 98, 49, 54, 97, 50, 99, 54, 48, 51,
        50, 55, 50, 102, 51, 54, 51, 101, 48, 56, 56, 97, 57, 52, 97, 98, 53, 98, 55, 52, 99, 48,
        53, 99, 100, 50, 52, 51, 99, 56, 50, 100, 49, 55, 101, 54, 97, 57, 97, 101, 99, 101, 98,
        55, 99, 53, 102, 102, 52, 49, 54, 48, 48, 100, 50, 97, 100, 101, 98, 56, 51, 49, 48, 53,
        101, 53, 55, 54, 100, 55, 51, 49, 101, 101, 101, 48, 50, 100, 97, 53, 56, 101, 57, 53, 49,
        49, 54, 100, 102, 97, 56, 102, 57, 56, 50, 102, 48, 99, 57, 52, 99, 52, 52, 56, 48, 50, 56,
        52, 50, 53, 97, 55, 101, 56, 57, 54, 48, 56, 50, 99, 54, 56, 99, 54, 98, 50, 49, 55, 52,
        56, 53, 54, 51, 48, 54, 49, 57, 50, 97, 99, 97, 100, 102, 49, 53, 53, 55, 102, 97, 48, 98,
        102, 55, 56, 98, 53, 98, 52, 101, 102, 48, 55, 98, 53, 49, 55, 54, 100, 51, 101, 99, 52,
        53, 101, 101, 52, 48, 51, 48, 52, 101, 97, 55, 53, 52, 97, 49, 98, 51, 50, 57, 53, 49, 98,
        48, 56, 52, 53, 52, 99, 54, 98, 53, 101, 52, 100, 48, 55, 101, 49, 57, 54, 55, 48, 51, 53,
        52, 51, 100, 97, 101, 57, 101, 53, 102, 53, 98, 50, 101, 57, 97, 48, 56, 52, 53, 49, 98,
        100, 48, 49, 97, 100, 102, 55, 99, 102, 51, 97, 54, 99, 51, 53, 55, 56, 52, 99, 53, 51,
        102, 53, 54, 102, 98, 48, 98, 98, 56, 97, 99, 51, 54, 56, 97, 102, 99, 48, 97, 49, 101, 49,
        98, 51, 97, 50, 98, 99, 102, 55, 97, 101, 101, 98, 51, 50, 99, 52, 48, 50, 49, 99, 99, 55,
        53, 52, 51, 99, 48, 98, 100, 50, 98, 52, 97, 100, 49, 56, 49, 99, 57, 48, 98, 48, 52, 52,
        50, 49, 55, 50, 100, 98, 55, 100, 50, 52, 100, 98, 101, 54, 98, 101, 55, 49, 50, 53, 52,
        50, 100, 101, 52, 49, 48, 99, 50, 50, 99, 49, 99, 50, 98, 102, 50, 53, 57, 51, 99, 97, 101,
        98, 55, 53, 49, 55, 102, 50, 99, 56, 57, 56, 54, 98, 56, 101, 97, 55, 52, 54, 51, 98, 102,
        56, 55, 56, 52, 56, 57, 55, 48, 98, 57, 100, 102, 102, 55, 98, 52, 48, 48, 48, 48, 48, 48,
        48, 55, 50, 54, 55, 52, 53, 57, 98, 54, 101, 57, 55, 97, 51, 101, 101, 57, 53, 100, 98, 97,
        99, 50, 50, 101, 101, 50, 52, 52, 52, 52, 98, 99, 50, 50, 97, 52, 51, 51, 101, 53, 50, 99,
        50, 48, 102, 55, 56, 52, 55, 98, 100, 50, 53, 51, 50, 54, 49, 97, 52, 51, 57, 54, 53, 99,
        49, 97, 102, 100, 97, 53, 50, 50, 51, 48, 100, 55, 56, 56, 53, 54, 51, 50, 56, 49, 49, 99,
        57, 54, 48, 56, 56, 49, 55, 99, 54, 57, 52, 101, 102, 99, 53, 54, 51, 102, 48, 55, 56, 50,
        56, 51, 57, 52, 51, 48, 54, 97, 49, 51, 55, 57, 53, 102, 98, 57, 53, 53, 57, 99, 49, 102,
        55, 101, 55, 49, 50, 54, 54, 102, 51, 101, 98, 101, 57, 57, 100, 98, 101, 99, 50, 102, 51,
        49, 49, 49, 56, 101, 97, 98, 51, 99, 53, 57, 53, 57, 99, 100, 101, 99, 53, 97, 57, 97, 102,
        56, 48, 97, 101, 50, 54, 99, 50, 55, 56, 57, 54, 97, 50, 101, 101, 101, 51, 52, 49, 50, 57,
        51, 51, 101, 102, 49, 99, 97, 48, 55, 101, 55, 51, 56, 54, 48, 52, 97, 100, 50, 53, 50, 48,
        98, 49, 101, 52, 55, 97, 56, 53, 102, 53, 98, 101, 54, 52, 57, 55, 52, 100, 102, 102, 98,
        55, 52, 101, 97, 50, 55, 102, 102, 56, 101, 49, 101, 97, 56, 53, 101, 50, 99, 49, 50, 102,
        51, 57, 97, 49, 98, 56, 53, 100, 57, 53, 101, 55, 102, 48, 50, 49, 48, 101, 101, 52, 98,
        101, 100, 54, 99, 54, 98, 97, 98, 53, 102, 57, 98, 55, 51, 48, 52, 57, 54, 98, 48, 54, 55,
        102, 51, 57, 51, 51, 54, 99, 54, 97, 97, 100, 57, 48, 57, 55, 98, 51, 101, 49, 101, 55,
        102, 57, 55, 54, 99, 48, 56, 53, 57, 101, 101, 99, 54, 102, 98, 56, 101, 57, 52, 50, 50,
        48, 99, 97, 101, 48, 99, 101, 56, 100, 48, 49, 55, 55, 52, 48, 53, 55, 97, 54, 102, 49, 51,
        49, 54, 99, 48, 99, 51, 49, 50, 52, 53, 51, 100, 54, 101, 99, 50, 98, 100, 50, 53, 53, 102,
        101, 51, 52, 49, 52, 53, 57, 53, 48, 57, 97, 51, 56, 54, 55, 101, 101, 49, 98, 99, 54, 101,
        99, 98, 98, 53, 56, 100, 101, 52, 56, 55, 49, 52, 49, 101, 100, 57, 48, 101, 54, 51, 98,
        52, 50, 97, 50, 49, 54, 52, 101, 56, 56, 50, 53, 48, 57, 50, 101, 57, 50, 102, 102, 99, 55,
        53, 49, 57, 57, 57, 54, 54, 100, 54, 55, 55, 52, 97, 52, 57, 57, 99, 54, 53, 102, 55, 101,
        54, 53, 52, 100, 49, 48, 101, 55, 97, 49, 100, 101, 97, 50, 97, 48, 53, 54, 48, 56, 54,
        101, 56, 100, 50, 101, 49, 101, 50, 56, 99, 102, 97, 99, 101, 49, 99, 50, 100, 98, 57, 54,
        48, 56, 99, 54, 57, 56, 55, 52, 102, 55, 54, 50, 99, 55, 102, 51, 102, 49, 102, 100, 52,
        53, 100, 100, 52, 102, 55, 49, 57, 98, 55, 55, 97, 51, 102, 53, 54, 98, 53, 53, 101, 97,
        98, 50, 50, 101, 51, 51, 52, 99, 97, 57, 51, 56, 52, 57, 49, 49, 98, 49, 49, 53, 54, 53,
        57, 100, 51, 49, 100, 54, 97, 55, 52, 52, 101, 57, 57, 52, 101, 100, 52, 50, 49, 52, 49,
        97, 50, 51, 57, 101, 57, 98, 55, 52, 48, 49, 51, 55, 97, 52, 102, 100, 53, 100, 99, 100,
        50, 55, 100, 48, 100, 48, 52, 98, 53, 102, 100, 48, 99, 102, 51, 48, 53, 48, 48, 48, 48,
        48, 48, 48, 49, 50, 102, 54, 51, 49, 53, 102, 54, 50, 49, 57, 102, 99, 57, 57, 48, 98, 48,
        97, 99, 99, 101, 102, 57, 50, 101, 52, 53, 102, 52, 55, 101, 55, 101, 50, 54, 54, 53, 52,
        97, 49, 48, 99, 99, 53, 99, 55, 49, 50, 54, 55, 51, 56, 52, 98, 100, 48, 56, 57, 51, 48,
        57, 101, 56, 50, 57, 57, 100, 101, 50, 101, 56, 99, 100, 48, 54, 57, 51, 49, 53, 57, 54,
        52, 56, 53, 102, 50, 52, 49, 54, 48, 52, 49, 53, 102, 48, 99, 99, 102, 49, 100, 97, 51,
        101, 55, 52, 51, 48, 55, 50, 50, 54, 50, 57, 49, 50, 50, 49, 48, 50, 100, 102, 99, 50, 49,
        55, 49, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 24, 139, 112, 139, 238,
        24, 15, 67, 227, 162, 82, 71, 23, 84, 253, 53, 40, 58, 107, 9, 166, 253, 2, 245, 185, 19,
        12, 193, 86, 4, 248, 11, 120, 217, 248, 212, 215, 175, 104, 226, 124, 224, 103, 116, 116,
        128, 32, 177, 63, 77, 246, 212, 243, 109, 253, 151, 94, 70, 97, 79, 141, 148, 26, 173, 193,
        178, 27, 106, 213, 42, 34, 8, 11, 251, 159, 166, 241, 188, 123, 221, 83, 199, 60, 155, 30,
        65, 254, 210, 193, 210, 177, 234, 235, 220, 251, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 154, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 154, 198, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 255, 255, 254, 255, 255, 255, 255, 255, 255,
        255, 255, 255,
    ];
    CommitHeaderRangeInput::new(data.as_ptr(), data.len() as u32).unpack();
}
